import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Configuraci칩n de la p치gina
st.set_page_config(page_title="Exploratorio",page_icon='游늴')
hide_menu ="""
<style>
#MainMenu {
    visibility:hidden;
}

[data-testid="stSidebar"] {
    display: none !important;
}

[data-testid="stApp"] {
    background-color: #020212;
    opacity: 0.8;
    background-image: radial-gradient(#232cd1 0.5px, #020212 0.5px);
    background-size: 10px 10px;
}
[data-testid="stHeader"] {
    visibility:hidden;
    background-color: #020212;
    opacity: 1;
    background-image: radial-gradient(#232cd1 0.5px, #020212 0.5px);
    background-size: 10px 10px;
}
"""
st.markdown(hide_menu,unsafe_allow_html=True)

#T칤tulo y regresar
col1, col2 = st.columns([4, 1])
with col1:
    st.title("An치lisis exploratorio de datos para ML")
with col2:
    if st.button(" 游댗 p치gina principal"):
        st.switch_page('Portafolio.py')


#DOWNLOAD_ROOT es la base del GitHub donde vamos a estar descargando las bases de datos.
DOWNLOAD_ROOT = "https://raw.githubusercontent.com/a2Proyectos/MachineLearning_Data/main/"
#Complementos con la direcci칩n especifica de la base de datos que queremos.
MEDICAMENTOS = "Capitulo_3/drug200.csv"

def extraer_datos(root,database):
    csv_path = root + database
    return pd.read_csv(csv_path)

# Cargando datos en un DF
df = extraer_datos(DOWNLOAD_ROOT,MEDICAMENTOS)

st.write("""El set de datos que vamos a analizar contiene informaci칩n de paciencientes de un centro m칠dico, 
         incluyendo su edad, sexo, presi칩n sangu칤nea, colosterol, indicador de sodio a potasio en la sangre,
         y el tipo de droga que se le recet칩 a cada paciente para tratar una enfermedad sangu칤nea. Se
         analizar치 el peque침o set de datos, teniendo en cuenta que se quiere predecir el tipo de droga
         que se le debe asignar a un paciente nuevo de acuerdo a las dem치s variables.""")

st.write('Dale un peque침o vistazo a los datos:')
st.table(df.head())

##ANALISIS DE CADA VARIABLE

#Gr치fica la variable 
#Establece una 치rea de figsize(9,5) es decir, el tama침o de la imagen
st.write("""Analizando la variable edad, se puede observar que los datos presentan una distribuci칩n
         aproximadamente uniforme, lo que nos d치 un indicio de que todas las edades est치n bien representadas
         dentro del estudio y no vamos a tener un sesgo.""")
plt.figure(figsize = (7,3))
gr1 = sns.displot(df['Age'], kde = True)
st.pyplot(gr1)


st.write("""Tanto la presi칩n sangu칤nea (alta, normal, baja) colo el colesterol (alto y normal) representan
         aproximadamente 1/3 y 1/2 de los datos respectivamente por lo que no generar치n ruido en los
         resultado, aunque se destaque un poco mas las personas con colesterol alto que los normles y bajos.""")
plt.figure(figsize = (7,3))
gr2 = sns.histplot(data=df,x="BP",hue="BP")
gr2 = gr2.get_figure()
st.pyplot(gr2)

# Crea una gr치fica de barras para Colesterol
plt.figure(figsize = (7,3))
gr3 = sns.histplot(data=df,x="Cholesterol",hue="Cholesterol")
gr3 = gr3.get_figure()
st.pyplot(gr3)

# Crea un displot para Sodio Potasio
st.write("""Los datos de la vriable de sodio a potasio tienen una distribuci칩n aproximadamente normal
         con una asimetr칤a positiva.""")
plt.figure(figsize = (9,5))
gr4 = sns.displot(df.Na_to_K,kde=True)
st.pyplot(gr4)


st.write("""Observando los datos que queremos predecir, podemos anticiparnos a las dificultades que tendr치
         cualquier modelo de machine learning para clasificar a una persona en los medicamentos B y C, 
         a causa de los pocos datos que se tienen sobre ellas, y se espera que se tenga una mejor
         precisi칩n para el medicamento Y.""")
plt.figure(figsize = (9,5))
gr5 = sns.histplot(data=df,x="Drug",hue="Drug")
gr5 = gr5.get_figure()
st.pyplot(gr5)


from pandas.plotting import scatter_matrix
st.write("""La relaci칩n entre las 2 variables predictoras que tiene el dataset (edad y nivel de sodio a potasio)
         es practicamente nula entre ellas, su relaci칩n tiene un alto componente aleatorio y no afectar치 los
         resultados de la predicci칩n.""")
#Para graficar scatter_matrix...
columns = ['Age','Na_to_K']
gr9 = scatter_matrix(df[columns], figsize = (12, 12), color = '#D52B06', alpha = 0.3, 
               hist_kwds = {'color':['bisque'], 'edgecolor': 'firebrick'});
gr9 = gr9[0, 0].get_figure()
st.pyplot(gr9)


st.write("""Ahora, comparando estas 2 variables num칠ricas con la variable a predecir, se observa que
         la edad solo es influyente para diferencia entre la droga B y A. Mientras que la dorga A la
         reciben personas menores de 50 a침os, la dorga B la reciben mayores, pero el resto de medicamentos
         no tienen diferencia alguna por edad.""")
plt.figure(figsize = (9,5))
gr6 = sns.swarmplot(x = "Drug", y = "Age",data = df,hue='Drug')
plt.legend(df['Drug'])
plt.title("Edad/Medicamento")
gr6 = gr6.get_figure()
st.pyplot(gr6)

#Grafica (con un swarmplot) la relaci칩n entre el nivel de Sodio-Potasio y los medicamentos 游눍 que se les da
st.write("""En cuanto al sodio a potasio, los datos solo nos permiten identificar que la dorga Y se le
         receta a personas con un nivel mayor a 15, de resto se distribuyen cualquiera de los otros
         medicamentos.""")
plt.figure(figsize = (9,5))
gr7 = sns.swarmplot(x = "Drug", y = "Na_to_K",data = df, hue='Drug')
plt.title("Sodio-Potasio/Medicamentos")
gr7 = gr7.get_figure()
st.pyplot(gr7)

# Grafica la relaci칩n entre la Presi칩n Sangu칤nea y los Medicamentos 游눍
st.write("""Para la presi칩n sangu칤nea y su relaci칩n con los tipos de medicamentos, la dorga A y B
         son solo recetadas a personas con presi칩n sangu칤nea alta, esto probablemente ayudar치 al
         modelo a clasificar este tipo de drogas que no tienen tanta informaci칩n en las otras variables
         que hemos analizado.""")
df_BP_Drug = df.groupby(["Drug","BP"]).size().reset_index(name = "Count")
plt.figure(figsize = (9,5))
gr8 = sns.barplot(x = "Drug",y="Count", hue = "BP",data = df_BP_Drug)
plt.title("Presi칩n Sanguinea/Medicamentos")
gr8 = gr8.get_figure()
st.pyplot(gr8)

# Grafica (con una gr치fica de barras)nla relaci칩n entre el nivel de colesterol y los medicamentos 游눍
st.write("""En cuanto al colesterol solo podemos inferir que la droga C es brindada a personas
         con altos niveles de colesterol.""")
df_CH_Drug = df.groupby(["Drug","Cholesterol"]).size().reset_index(name = "Count")
plt.figure(figsize = (9,5))
gr9 = sns.barplot(x = "Drug",y="Count", hue = "Cholesterol",data = df_CH_Drug)
plt.title("Colesterol/Medicamentos")
gr9 = gr9.get_figure()
st.pyplot(gr9)


st.write("""Para el desarrollo de un modelo de machine learning se requiere previamente preporcesar los 
         datos, y aunque nuestro dataset no es muy grande ni contiene muchas variables, hay algunos
         detalles que se deben ajustar. Se deben escalar los datos num칠ricos para que esten en la misma escala 
         y que el modelo no vaya a presentar confusiones por las escalas tan diferentes que tienen las
         edades y los niveles de sodio a potasio y las variables categ칩ricas se deben codificar para
         pasarlas a num칠ricas y que el modelo las pueda interpretar.""")

st.write("""En este caso, se aplic칩 un modelo Random Forest, que es un m칠todo de ensamble construido
         a partir de diversos arboles de decisi칩n.""")

st.write("""Validando los resultados del modelo con el set de prueba tenemos la siguiente matriz de confusi칩n,
         donde en la diagonal se encuentran los datos correctamente predichos, teniendo una precisi칩n de 95%.""")

## Utilizar LabelEncoder para procesar variables alfanum칠ricas como el sexo, BP, Colesterol, 칠tc
from sklearn.preprocessing import LabelEncoder

def label_encoder(datos_categoria):
    le = LabelEncoder()
    df[datos_categoria] = le.fit_transform(df[datos_categoria])

variables = ["Sex","BP","Cholesterol","Na_to_K","Drug"]

for l in variables:
    label_encoder(l)
    
# Crear set de entrenamiento y set de prueba
x = df.drop(["Drug"],axis=1)
y = df['Drug']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42, shuffle = True)

#Hacer un clasificador de random forest
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
rfc.fit(x_train, y_train)

from sklearn.model_selection import cross_val_predict
from sklearn.metrics import confusion_matrix

y_train_pred = cross_val_predict(rfc, x_train, y_train, cv=3)
conf_mz = confusion_matrix(y_train,y_train_pred)
st.title('Matriz de confusi칩n')
st.table(conf_mz)